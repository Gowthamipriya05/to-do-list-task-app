{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\to-do-list\\\\src\\\\TodoList.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from 'react';\r\nimport './App.css'; // Import your CSS file for styling\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [task, setTask] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n\r\n  const handleAddTodo = () => {\r\n    if (task.trim() !== '') {\r\n      setTodos([...todos, task]);\r\n      setTask('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteTodo = (index) => {\r\n    const newTodos = todos.filter((_, i) => i !== index);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const handleEditTodo = (index) => {\r\n    setEditingIndex(index);\r\n    setTask(todos[index]);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (task.trim() !== '') {\r\n      const updatedTodos = [...todos];\r\n      updatedTodos[editingIndex] = task;\r\n      setTodos(updatedTodos);\r\n      setTask('');\r\n      setEditingIndex(-1);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setTask('');\r\n    setEditingIndex(-1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>**** Todo List ****</h1>\r\n      <div>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a task\"\r\n          value={task}\r\n          onChange={(e) => setTask(e.target.value)}\r\n        />\r\n        {editingIndex !== -1 ? (\r\n          <>\r\n            <button onClick={handleSaveEdit}>Save</button>\r\n            <button onClick={handleCancelEdit}>Cancel</button>\r\n          </>\r\n        ) : (\r\n          <button onClick={handleAddTodo}>Add</button>\r\n        )}\r\n      </div>\r\n      <div>\r\n      <ul>\r\n        {todos.map((todo, index) => (\r\n          <li key={index}>\r\n            {index === editingIndex ? (\r\n              <input\r\n                className=\"edit-input\"\r\n                type=\"text\"\r\n                value={task}\r\n                onChange={(e) => setTask(e.target.value)}\r\n              />\r\n            ) : (\r\n              <div className=\"text\">{todo}</div>\r\n            )}\r\n            {index === editingIndex ? (\r\n              <>\r\n               \r\n              </>\r\n            ) : (\r\n              <>\r\n              <button className=\"btn done-button\" onClick={style}>Done</button>\r\n                <button className=\"btn edit-button\" onClick={() => handleEditTodo(index)}>Edit</button>\r\n                <button  className=\"btn delete-button\" onClick={() => handleDeleteTodo(index)}>Delete</button>\r\n              </>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n*/\n/*import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [task, setTask] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n  const [completed, setCompleted] = useState([]); // New state to track completion status\r\n\r\n  const handleAddTodo = () => {\r\n    if (task.trim() !== '') {\r\n      setTodos([...todos, task]);\r\n      setCompleted([...completed, false]); // Initialize completion status to false\r\n      setTask('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteTodo = (index) => {\r\n    const newTodos = todos.filter((_, i) => i !== index);\r\n    const newCompleted = completed.filter((_, i) => i !== index);\r\n    setTodos(newTodos);\r\n    setCompleted(newCompleted);\r\n    setTask('');\r\n  };\r\n\r\n  const handleEditTodo = (index) => {\r\n    setEditingIndex(index);\r\n    setTask(todos[index]);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (task.trim() !== '') {\r\n      const updatedTodos = [...todos];\r\n      updatedTodos[editingIndex] = task;\r\n      setTodos(updatedTodos);\r\n      setTask('');\r\n      setEditingIndex(-1);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setTask('');\r\n    setEditingIndex(-1);\r\n  };\r\n\r\n  const toggleComplete = (index) => {\r\n    const newCompleted = [...completed];\r\n    newCompleted[index] = !newCompleted[index]; // Toggle completion status\r\n    setCompleted(newCompleted);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>**** Todo List ****</h1>\r\n      <div>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a task\"\r\n          value={task}\r\n          onChange={(e) => setTask(e.target.value)}\r\n        />\r\n        {editingIndex !== -1 ? (\r\n          <>\r\n            <button onClick={handleSaveEdit}>Save</button>\r\n            <button onClick={handleCancelEdit}>Cancel</button>\r\n          </>\r\n        ) : (\r\n          <button onClick={handleAddTodo}>Add</button>\r\n        )}\r\n      </div>\r\n      <ul>\r\n        {todos.map((todo, index) => (\r\n          <li key={index}>\r\n            {index === editingIndex ? (\r\n              <input\r\n                className=\"edit-input\"\r\n                type=\"text\"\r\n                value={task}\r\n                onChange={(e) => setTask(e.target.value)}\r\n              />\r\n            ) : (\r\n              <span style={{ textDecoration: completed[index] ? 'line-through' : 'none' }}>{todo}</span>\r\n            )}\r\n            {index === editingIndex ? (\r\n              <>\r\n                \r\n              </>\r\n            ) : (\r\n              <>\r\n                <button className=\"btn edit-button\" onClick={() => handleEditTodo(index)}>Edit</button>\r\n                <button className=\"btn delete-button\" onClick={() => handleDeleteTodo(index)}>Delete</button>\r\n                <button className=\"btn complete-button\" onClick={() => toggleComplete(index)}>\r\n                  {completed[index] ? 'Uncomplete' : 'Complete'}\r\n                </button>\r\n              </>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n*/\n/*import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [task, setTask] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n  const [completed, setCompleted] = useState([]);\r\n\r\n  const handleAddTodo = () => {\r\n    if (task.trim() !== '') {\r\n      setTodos([...todos, task]);\r\n      setCompleted([...completed, false]);\r\n      setTask('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteTodo = (index) => {\r\n    const newTodos = todos.filter((_, i) => i !== index);\r\n    const newCompleted = completed.filter((_, i) => i !== index);\r\n    setTodos(newTodos);\r\n    setCompleted(newCompleted);\r\n    setTask('');\r\n  };\r\n\r\n  const handleEditTodo = (index) => {\r\n    setEditingIndex(index);\r\n    setTask(todos[index]);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (task.trim() !== '') {\r\n      const updatedTodos = [...todos];\r\n      updatedTodos[editingIndex] = task;\r\n      setTodos(updatedTodos);\r\n      setTask('');\r\n      setEditingIndex(-1);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setTask('');\r\n    setEditingIndex(-1);\r\n  };\r\n\r\n  const toggleComplete = (index) => {\r\n    const newCompleted = [...completed];\r\n    newCompleted[index] = !newCompleted[index];\r\n    setCompleted(newCompleted);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <h1>**** Todo List ****</h1>\r\n      <div>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a task\"\r\n          value={task}\r\n          onChange={(e) => setTask(e.target.value)}\r\n        />\r\n        {editingIndex !== -1 ? (\r\n          <>\r\n            <button className=\"btn save-button\" onClick={handleSaveEdit}>Save</button>\r\n            <button className=\"btn cancel-button\" onClick={handleCancelEdit}>Cancel</button>\r\n          </>\r\n        ) : (\r\n          <button className=\"btn add-button\" onClick={handleAddTodo}>Add</button>\r\n        )}\r\n      </div>\r\n      <ul className=\"todo-list\">\r\n        {todos.map((todo, index) => (\r\n          <li key={index} className=\"todo-item\">\r\n            {index === editingIndex ? (\r\n              <input\r\n                className=\"edit-input\"\r\n                type=\"text\"\r\n                value={task}\r\n                onChange={(e) => setTask(e.target.value)}\r\n              />\r\n            ) : (\r\n              <span className={completed[index] ? 'completed-task' : 'incomplete-task'}>{todo}</span>\r\n            )}\r\n            {index === editingIndex ? (\r\n              null\r\n            ) : (\r\n              <div>\r\n                <button className=\"btn edit-button\" onClick={() => handleEditTodo(index)}>Edit</button>\r\n                <button className=\"btn delete-button\" onClick={() => handleDeleteTodo(index)}>Delete</button>\r\n                <button className=\"btn complete-button\" onClick={() => toggleComplete(index)}>\r\n                  {completed[index] ? 'Uncomplete' : 'Complete'}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n*/\n/*\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [task, setTask] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n  const [completed, setCompleted] = useState([]);\r\n  const [editedTask, setEditedTask] = useState('');\r\n\r\n  const handleAddTodo = () => {\r\n    if (task.trim() !== '') {\r\n      setTodos([...todos, task]);\r\n      setCompleted([...completed, false]);\r\n      setTask('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteTodo = (index) => {\r\n    const newTodos = todos.filter((_, i) => i !== index);\r\n    const newCompleted = completed.filter((_, i) => i !== index);\r\n    setTodos(newTodos);\r\n    setCompleted(newCompleted);\r\n\r\n    if (editingIndex === index) {\r\n      setEditingIndex(-1);\r\n      setEditedTask('');\r\n    }\r\n  };\r\n\r\n  const handleEditTodo = (index) => {\r\n    setEditingIndex(index);\r\n    setEditedTask(todos[index]);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (editedTask.trim() !== '') {\r\n      const updatedTodos = [...todos];\r\n      updatedTodos[editingIndex] = editedTask;\r\n      setTodos(updatedTodos);\r\n      setEditedTask('');\r\n      setEditingIndex(-1);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditedTask('');\r\n    setEditingIndex(-1);\r\n  };\r\n\r\n  const toggleComplete = (index) => {\r\n    const newCompleted = [...completed];\r\n    newCompleted[index] = !newCompleted[index];\r\n    setCompleted(newCompleted);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <h1>**** Todo List ****</h1>\r\n      <div>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a task\"\r\n          value={task}\r\n          onChange={(e) => setTask(e.target.value)}\r\n        />\r\n        {editingIndex !== -1 ? (\r\n          <>\r\n            <button className=\"btn save-button\" onClick={handleSaveEdit}>Save</button>\r\n            <button className=\"btn cancel-button\" onClick={handleCancelEdit}>Cancel</button>\r\n          </>\r\n        ) : (\r\n          <button className=\"btn add-button\" onClick={handleAddTodo}>Add</button>\r\n        )}\r\n      </div>\r\n      <ul className=\"todo-list\">\r\n        {todos.map((todo, index) => (\r\n          <li key={index} className=\"todo-item\">\r\n            {index === editingIndex ? (\r\n              <input\r\n                className=\"edit-input\"\r\n                type=\"text\"\r\n                value={editedTask}\r\n                onChange={(e) => setEditedTask(e.target.value)}\r\n              />\r\n            ) : (\r\n              <span className={completed[index] ? 'completed-task' : 'incomplete-task'}>{todo}</span>\r\n            )}\r\n            {index === editingIndex ? (\r\n              null\r\n            ) : (\r\n              <div>\r\n                <button className=\"btn edit-button\" onClick={() => handleEditTodo(index)}>Edit</button>\r\n                <button className=\"btn delete-button\" onClick={() => handleDeleteTodo(index)}>Delete</button>\r\n                <button className=\"btn complete-button\" onClick={() => toggleComplete(index)}>\r\n                  {completed[index] ? 'Uncomplete' : 'Complete'}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n*/\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TodoList() {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [task, setTask] = useState('');\n  const [editingIndex, setEditingIndex] = useState(-1);\n  const [completed, setCompleted] = useState([]);\n  const [editedTask, setEditedTask] = useState('');\n  const [isAddButtonClicked, setIsAddButtonClicked] = useState(false); // New state to track \"Add\" button click\n\n  const handleAddTodo = () => {\n    if (task.trim() !== '') {\n      setTodos([...todos, task]);\n      setCompleted([...completed, false]);\n      setTask('');\n      setIsAddButtonClicked(true); // Set the state to true when \"Add\" button is clicked\n    }\n  };\n\n  const handleDeleteTodo = index => {\n    const newTodos = todos.filter((_, i) => i !== index);\n    const newCompleted = completed.filter((_, i) => i !== index);\n    setTodos(newTodos);\n    setCompleted(newCompleted);\n    if (editingIndex === index) {\n      setEditingIndex(-1);\n      setEditedTask('');\n    }\n  };\n  const handleEditTodo = index => {\n    setEditingIndex(index);\n    setEditedTask(todos[index]);\n  };\n  const handleSaveEdit = () => {\n    if (editedTask.trim() !== '') {\n      const updatedTodos = [...todos];\n      updatedTodos[editingIndex] = editedTask;\n      setTodos(updatedTodos);\n      setEditedTask('');\n      setEditingIndex(-1);\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditedTask('');\n    setEditingIndex(-1);\n  };\n  const toggleComplete = index => {\n    const newCompleted = [...completed];\n    newCompleted[index] = !newCompleted[index];\n    setCompleted(newCompleted);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"**** Todo List ****\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        placeholder: \"Enter a task\",\n        value: task,\n        onChange: e => setTask(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 9\n      }, this), editingIndex !== -1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn save-button\",\n          onClick: handleSaveEdit,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn cancel-button\",\n          onClick: handleCancelEdit,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn add-button ${isAddButtonClicked ? 'add-button-clicked' : ''}` // Apply a class conditionally\n        ,\n        onClick: handleAddTodo,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"todo-list\",\n      children: todos.map((todo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"todo-item\",\n        children: [index === editingIndex ? /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"edit-input\",\n          type: \"text\",\n          value: editedTask,\n          onChange: e => setEditedTask(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: completed[index] ? 'completed-task' : 'incomplete-task',\n          children: todo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 15\n        }, this), index === editingIndex ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn edit-button\",\n            onClick: () => handleEditTodo(index),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn delete-button\",\n            onClick: () => handleDeleteTodo(index),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn complete-button\",\n            onClick: () => toggleComplete(index),\n            children: completed[index] ? 'Uncomplete' : 'Complete'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 476,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoList, \"otqfYqnrMbqpgxzXqEnmyKVa8To=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TodoList","_s","todos","setTodos","task","setTask","editingIndex","setEditingIndex","completed","setCompleted","editedTask","setEditedTask","isAddButtonClicked","setIsAddButtonClicked","handleAddTodo","trim","handleDeleteTodo","index","newTodos","filter","_","i","newCompleted","handleEditTodo","handleSaveEdit","updatedTodos","handleCancelEdit","toggleComplete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","todo","_c","$RefreshReg$"],"sources":["D:/React/to-do-list/src/TodoList.js"],"sourcesContent":["\r\n/*import React, { useState } from 'react';\r\nimport './App.css'; // Import your CSS file for styling\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [task, setTask] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n\r\n  const handleAddTodo = () => {\r\n    if (task.trim() !== '') {\r\n      setTodos([...todos, task]);\r\n      setTask('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteTodo = (index) => {\r\n    const newTodos = todos.filter((_, i) => i !== index);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const handleEditTodo = (index) => {\r\n    setEditingIndex(index);\r\n    setTask(todos[index]);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (task.trim() !== '') {\r\n      const updatedTodos = [...todos];\r\n      updatedTodos[editingIndex] = task;\r\n      setTodos(updatedTodos);\r\n      setTask('');\r\n      setEditingIndex(-1);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setTask('');\r\n    setEditingIndex(-1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>**** Todo List ****</h1>\r\n      <div>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a task\"\r\n          value={task}\r\n          onChange={(e) => setTask(e.target.value)}\r\n        />\r\n        {editingIndex !== -1 ? (\r\n          <>\r\n            <button onClick={handleSaveEdit}>Save</button>\r\n            <button onClick={handleCancelEdit}>Cancel</button>\r\n          </>\r\n        ) : (\r\n          <button onClick={handleAddTodo}>Add</button>\r\n        )}\r\n      </div>\r\n      <div>\r\n      <ul>\r\n        {todos.map((todo, index) => (\r\n          <li key={index}>\r\n            {index === editingIndex ? (\r\n              <input\r\n                className=\"edit-input\"\r\n                type=\"text\"\r\n                value={task}\r\n                onChange={(e) => setTask(e.target.value)}\r\n              />\r\n            ) : (\r\n              <div className=\"text\">{todo}</div>\r\n            )}\r\n            {index === editingIndex ? (\r\n              <>\r\n               \r\n              </>\r\n            ) : (\r\n              <>\r\n              <button className=\"btn done-button\" onClick={style}>Done</button>\r\n                <button className=\"btn edit-button\" onClick={() => handleEditTodo(index)}>Edit</button>\r\n                <button  className=\"btn delete-button\" onClick={() => handleDeleteTodo(index)}>Delete</button>\r\n              </>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n*/\r\n/*import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [task, setTask] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n  const [completed, setCompleted] = useState([]); // New state to track completion status\r\n\r\n  const handleAddTodo = () => {\r\n    if (task.trim() !== '') {\r\n      setTodos([...todos, task]);\r\n      setCompleted([...completed, false]); // Initialize completion status to false\r\n      setTask('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteTodo = (index) => {\r\n    const newTodos = todos.filter((_, i) => i !== index);\r\n    const newCompleted = completed.filter((_, i) => i !== index);\r\n    setTodos(newTodos);\r\n    setCompleted(newCompleted);\r\n    setTask('');\r\n  };\r\n\r\n  const handleEditTodo = (index) => {\r\n    setEditingIndex(index);\r\n    setTask(todos[index]);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (task.trim() !== '') {\r\n      const updatedTodos = [...todos];\r\n      updatedTodos[editingIndex] = task;\r\n      setTodos(updatedTodos);\r\n      setTask('');\r\n      setEditingIndex(-1);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setTask('');\r\n    setEditingIndex(-1);\r\n  };\r\n\r\n  const toggleComplete = (index) => {\r\n    const newCompleted = [...completed];\r\n    newCompleted[index] = !newCompleted[index]; // Toggle completion status\r\n    setCompleted(newCompleted);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>**** Todo List ****</h1>\r\n      <div>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a task\"\r\n          value={task}\r\n          onChange={(e) => setTask(e.target.value)}\r\n        />\r\n        {editingIndex !== -1 ? (\r\n          <>\r\n            <button onClick={handleSaveEdit}>Save</button>\r\n            <button onClick={handleCancelEdit}>Cancel</button>\r\n          </>\r\n        ) : (\r\n          <button onClick={handleAddTodo}>Add</button>\r\n        )}\r\n      </div>\r\n      <ul>\r\n        {todos.map((todo, index) => (\r\n          <li key={index}>\r\n            {index === editingIndex ? (\r\n              <input\r\n                className=\"edit-input\"\r\n                type=\"text\"\r\n                value={task}\r\n                onChange={(e) => setTask(e.target.value)}\r\n              />\r\n            ) : (\r\n              <span style={{ textDecoration: completed[index] ? 'line-through' : 'none' }}>{todo}</span>\r\n            )}\r\n            {index === editingIndex ? (\r\n              <>\r\n                \r\n              </>\r\n            ) : (\r\n              <>\r\n                <button className=\"btn edit-button\" onClick={() => handleEditTodo(index)}>Edit</button>\r\n                <button className=\"btn delete-button\" onClick={() => handleDeleteTodo(index)}>Delete</button>\r\n                <button className=\"btn complete-button\" onClick={() => toggleComplete(index)}>\r\n                  {completed[index] ? 'Uncomplete' : 'Complete'}\r\n                </button>\r\n              </>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n*/\r\n/*import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [task, setTask] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n  const [completed, setCompleted] = useState([]);\r\n\r\n  const handleAddTodo = () => {\r\n    if (task.trim() !== '') {\r\n      setTodos([...todos, task]);\r\n      setCompleted([...completed, false]);\r\n      setTask('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteTodo = (index) => {\r\n    const newTodos = todos.filter((_, i) => i !== index);\r\n    const newCompleted = completed.filter((_, i) => i !== index);\r\n    setTodos(newTodos);\r\n    setCompleted(newCompleted);\r\n    setTask('');\r\n  };\r\n\r\n  const handleEditTodo = (index) => {\r\n    setEditingIndex(index);\r\n    setTask(todos[index]);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (task.trim() !== '') {\r\n      const updatedTodos = [...todos];\r\n      updatedTodos[editingIndex] = task;\r\n      setTodos(updatedTodos);\r\n      setTask('');\r\n      setEditingIndex(-1);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setTask('');\r\n    setEditingIndex(-1);\r\n  };\r\n\r\n  const toggleComplete = (index) => {\r\n    const newCompleted = [...completed];\r\n    newCompleted[index] = !newCompleted[index];\r\n    setCompleted(newCompleted);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <h1>**** Todo List ****</h1>\r\n      <div>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a task\"\r\n          value={task}\r\n          onChange={(e) => setTask(e.target.value)}\r\n        />\r\n        {editingIndex !== -1 ? (\r\n          <>\r\n            <button className=\"btn save-button\" onClick={handleSaveEdit}>Save</button>\r\n            <button className=\"btn cancel-button\" onClick={handleCancelEdit}>Cancel</button>\r\n          </>\r\n        ) : (\r\n          <button className=\"btn add-button\" onClick={handleAddTodo}>Add</button>\r\n        )}\r\n      </div>\r\n      <ul className=\"todo-list\">\r\n        {todos.map((todo, index) => (\r\n          <li key={index} className=\"todo-item\">\r\n            {index === editingIndex ? (\r\n              <input\r\n                className=\"edit-input\"\r\n                type=\"text\"\r\n                value={task}\r\n                onChange={(e) => setTask(e.target.value)}\r\n              />\r\n            ) : (\r\n              <span className={completed[index] ? 'completed-task' : 'incomplete-task'}>{todo}</span>\r\n            )}\r\n            {index === editingIndex ? (\r\n              null\r\n            ) : (\r\n              <div>\r\n                <button className=\"btn edit-button\" onClick={() => handleEditTodo(index)}>Edit</button>\r\n                <button className=\"btn delete-button\" onClick={() => handleDeleteTodo(index)}>Delete</button>\r\n                <button className=\"btn complete-button\" onClick={() => toggleComplete(index)}>\r\n                  {completed[index] ? 'Uncomplete' : 'Complete'}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n*/\r\n/*\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [task, setTask] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n  const [completed, setCompleted] = useState([]);\r\n  const [editedTask, setEditedTask] = useState('');\r\n\r\n  const handleAddTodo = () => {\r\n    if (task.trim() !== '') {\r\n      setTodos([...todos, task]);\r\n      setCompleted([...completed, false]);\r\n      setTask('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteTodo = (index) => {\r\n    const newTodos = todos.filter((_, i) => i !== index);\r\n    const newCompleted = completed.filter((_, i) => i !== index);\r\n    setTodos(newTodos);\r\n    setCompleted(newCompleted);\r\n\r\n    if (editingIndex === index) {\r\n      setEditingIndex(-1);\r\n      setEditedTask('');\r\n    }\r\n  };\r\n\r\n  const handleEditTodo = (index) => {\r\n    setEditingIndex(index);\r\n    setEditedTask(todos[index]);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (editedTask.trim() !== '') {\r\n      const updatedTodos = [...todos];\r\n      updatedTodos[editingIndex] = editedTask;\r\n      setTodos(updatedTodos);\r\n      setEditedTask('');\r\n      setEditingIndex(-1);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditedTask('');\r\n    setEditingIndex(-1);\r\n  };\r\n\r\n  const toggleComplete = (index) => {\r\n    const newCompleted = [...completed];\r\n    newCompleted[index] = !newCompleted[index];\r\n    setCompleted(newCompleted);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <h1>**** Todo List ****</h1>\r\n      <div>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a task\"\r\n          value={task}\r\n          onChange={(e) => setTask(e.target.value)}\r\n        />\r\n        {editingIndex !== -1 ? (\r\n          <>\r\n            <button className=\"btn save-button\" onClick={handleSaveEdit}>Save</button>\r\n            <button className=\"btn cancel-button\" onClick={handleCancelEdit}>Cancel</button>\r\n          </>\r\n        ) : (\r\n          <button className=\"btn add-button\" onClick={handleAddTodo}>Add</button>\r\n        )}\r\n      </div>\r\n      <ul className=\"todo-list\">\r\n        {todos.map((todo, index) => (\r\n          <li key={index} className=\"todo-item\">\r\n            {index === editingIndex ? (\r\n              <input\r\n                className=\"edit-input\"\r\n                type=\"text\"\r\n                value={editedTask}\r\n                onChange={(e) => setEditedTask(e.target.value)}\r\n              />\r\n            ) : (\r\n              <span className={completed[index] ? 'completed-task' : 'incomplete-task'}>{todo}</span>\r\n            )}\r\n            {index === editingIndex ? (\r\n              null\r\n            ) : (\r\n              <div>\r\n                <button className=\"btn edit-button\" onClick={() => handleEditTodo(index)}>Edit</button>\r\n                <button className=\"btn delete-button\" onClick={() => handleDeleteTodo(index)}>Delete</button>\r\n                <button className=\"btn complete-button\" onClick={() => toggleComplete(index)}>\r\n                  {completed[index] ? 'Uncomplete' : 'Complete'}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n*/\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [task, setTask] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n  const [completed, setCompleted] = useState([]);\r\n  const [editedTask, setEditedTask] = useState('');\r\n  const [isAddButtonClicked, setIsAddButtonClicked] = useState(false); // New state to track \"Add\" button click\r\n\r\n  const handleAddTodo = () => {\r\n    if (task.trim() !== '') {\r\n      setTodos([...todos, task]);\r\n      setCompleted([...completed, false]);\r\n      setTask('');\r\n      setIsAddButtonClicked(true); // Set the state to true when \"Add\" button is clicked\r\n    }\r\n  };\r\n\r\n  const handleDeleteTodo = (index) => {\r\n    const newTodos = todos.filter((_, i) => i !== index);\r\n    const newCompleted = completed.filter((_, i) => i !== index);\r\n    setTodos(newTodos);\r\n    setCompleted(newCompleted);\r\n\r\n    if (editingIndex === index) {\r\n      setEditingIndex(-1);\r\n      setEditedTask('');\r\n    }\r\n  };\r\n\r\n  const handleEditTodo = (index) => {\r\n    setEditingIndex(index);\r\n    setEditedTask(todos[index]);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (editedTask.trim() !== '') {\r\n      const updatedTodos = [...todos];\r\n      updatedTodos[editingIndex] = editedTask;\r\n      setTodos(updatedTodos);\r\n      setEditedTask('');\r\n      setEditingIndex(-1);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditedTask('');\r\n    setEditingIndex(-1);\r\n  };\r\n\r\n  const toggleComplete = (index) => {\r\n    const newCompleted = [...completed];\r\n    newCompleted[index] = !newCompleted[index];\r\n    setCompleted(newCompleted);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <h1>**** Todo List ****</h1>\r\n      <div>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a task\"\r\n          value={task}\r\n          onChange={(e) => setTask(e.target.value)}\r\n        />\r\n        {editingIndex !== -1 ? (\r\n          <>\r\n            <button className=\"btn save-button\" onClick={handleSaveEdit}>Save</button>\r\n            <button className=\"btn cancel-button\" onClick={handleCancelEdit}>Cancel</button>\r\n          </>\r\n        ) : (\r\n          <button\r\n            className={`btn add-button ${isAddButtonClicked ? 'add-button-clicked' : ''}`} // Apply a class conditionally\r\n            onClick={handleAddTodo}\r\n          >\r\n            Add\r\n          </button>\r\n        )}\r\n      </div>\r\n      <ul className=\"todo-list\">\r\n        {todos.map((todo, index) => (\r\n          <li key={index} className=\"todo-item\">\r\n            {index === editingIndex ? (\r\n              <input\r\n                className=\"edit-input\"\r\n                type=\"text\"\r\n                value={editedTask}\r\n                onChange={(e) => setEditedTask(e.target.value)}\r\n              />\r\n            ) : (\r\n              <span className={completed[index] ? 'completed-task' : 'incomplete-task'}>{todo}</span>\r\n            )}\r\n            {index === editingIndex ? (\r\n              null\r\n            ) : (\r\n              <div>\r\n                <button className=\"btn edit-button\" onClick={() => handleEditTodo(index)}>Edit</button>\r\n                <button className=\"btn delete-button\" onClick={() => handleDeleteTodo(index)}>Delete</button>\r\n                <button className=\"btn complete-button\" onClick={() => toggleComplete(index)}>\r\n                  {completed[index] ? 'Uncomplete' : 'Complete'}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}